/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Reservation;
import io.swagger.model.ReservationsBody;
import io.swagger.model.ReservationsReservationIdBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-27T23:58:07.589943-04:00[America/New_York]")
@Validated
public interface ReservationsApi {

    @Operation(summary = "Get all reservations for the authenticated member", description = "Allows a member to retrieve all their reservations.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved member's reservations.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Reservation.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Member access token is invalid.") })
    @RequestMapping(value = "/reservations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Reservation>> reservationsGet(@RequestHeader("Authorization") String token);


    @Operation(summary = "Create a reservation", description = "Allows a member to create a reservation.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Reservation successfully created.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Reservation.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request. Invalid data provided."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Member access token is invalid."),
        
        @ApiResponse(responseCode = "404", description = "Not found. Showtime not found."),
        
        @ApiResponse(responseCode = "409", description = "Conflict. Requested number of seats not available.") })
    @RequestMapping(value = "/reservations",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Reservation> reservationsPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ReservationsBody body, @RequestHeader("Authorization") String token
);


    @Operation(summary = "Cancel a reservation", description = "Allows a member to cancel their reservation.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Reservation successfully canceled."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Member access token is invalid."),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Member does not have permission to cancel this reservation."),
        
        @ApiResponse(responseCode = "404", description = "Not found. Reservation not found."),
        
        @ApiResponse(responseCode = "409", description = "Conflict. Showtime has already occurred.") })
    @RequestMapping(value = "/reservations/{reservation_id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> reservationsReservationIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID of the reservation to cancel.", required=true, schema=@Schema()) @PathVariable("reservation_id") Long reservationId, @RequestHeader("Authorization") String token
);


    @Operation(summary = "Update a reservation", description = "Allows a member to update their reservation.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation successfully updated.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Reservation.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request. Invalid data provided."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Member access token is invalid."),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Member does not have permission to update this reservation."),
        
        @ApiResponse(responseCode = "404", description = "Not found. Reservation or showtime not found."),
        
        @ApiResponse(responseCode = "409", description = "Conflict. Requested number of seats not available.") })
    @RequestMapping(value = "/reservations/{reservation_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Reservation> reservationsReservationIdPut(@Parameter(in = ParameterIn.PATH, description = "ID of the reservation to update.", required=true, schema=@Schema()) @PathVariable("reservation_id") Long reservationId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ReservationsReservationIdBody body, @RequestHeader("Authorization") String token
);

}

