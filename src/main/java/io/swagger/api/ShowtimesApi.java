/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Movie;
import io.swagger.model.Showtime;
import io.swagger.model.ShowtimeRequestBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

import org.hibernate.internal.util.type.PrimitiveWrapperHelper.LongDescriptor;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-25T21:59:48.447063-04:00[America/New_York]")
@Validated
public interface ShowtimesApi {

    @Operation(summary = "Get all showtimes", description = "Returns a list of all showtimes.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of showtimes.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Showtime.class)))) })
    @RequestMapping(value = "/showtimes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Showtime>> showtimesGet();


    @Operation(summary = "Create a new showtime", description = "Allows an admin to create a new showtime.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Showtime successfully created."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Admin access token is invalid."),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Only admins are allowed to perform this action.") })
    @RequestMapping(value = "/showtimes",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> showtimesPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ShowtimeRequestBody body
);


    @Operation(summary = "Delete a showtime", description = "Allows an admin to delete a showtime.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Showtime successfully deleted."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Admin access token is invalid."),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Only admins are allowed to perform this action."),
        
        @ApiResponse(responseCode = "404", description = "Not found. Showtime not found.") })
    @RequestMapping(value = "/showtimes/{showtime_id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> showtimesShowtimeIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID of the showtime to delete.", required=true, schema=@Schema()) @PathVariable("showtime_id") Long showtimeId
);


    @Operation(summary = "Get details about a specific showtime", description = "Returns details about a specific showtime.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Details about the showtime.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Showtime.class))) })
    @RequestMapping(value = "/showtimes/{showtime_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Showtime> showtimesShowtimeIdGet(@Parameter(in = ParameterIn.PATH, description = "ID of the showtime to retrieve details for.", required=true, schema=@Schema()) @PathVariable("showtime_id") Long showtimeId
);


    @Operation(summary = "Get movies for a specific showtime", description = "Returns a list of movies playing at a specific showtime.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of movies playing at the showtime.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Movie.class)))) })
    @RequestMapping(value = "/showtimes/{showtime_id}/movies",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Movie>> showtimesShowtimeIdMoviesGet(@Parameter(in = ParameterIn.PATH, description = "ID of the showtime to retrieve movies for.", required=true, schema=@Schema()) @PathVariable("showtime_id") Long showtimeId
);


    @Operation(summary = "Update a showtime", description = "Allows an admin to update a showtime.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Showtime successfully updated."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Admin access token is invalid."),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Only admins are allowed to perform this action."),
        
        @ApiResponse(responseCode = "404", description = "Not found. Showtime not found.") })
    @RequestMapping(value = "/showtimes/{showtime_id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> showtimesShowtimeIdPut(@Parameter(in = ParameterIn.PATH, description = "ID of the showtime to update.", required=true, schema=@Schema()) @PathVariable("showtime_id") Long showtimeId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ShowtimeRequestBody body
);

}

