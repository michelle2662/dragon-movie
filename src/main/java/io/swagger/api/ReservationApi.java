/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Reservation;
import io.swagger.model.ReservationModifyBody;
import io.swagger.model.ReservationReserveBody;
import io.swagger.model.TheaterBox;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-25T21:59:48.447063-04:00[America/New_York]")
@Validated
public interface ReservationApi {

    @Operation(summary = "Cancel reservation for a given showtime", description = "Allows a member to cancel their reservation for a given showtime.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation successfully canceled.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Reservation.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Member access token is invalid."),
        
        @ApiResponse(responseCode = "404", description = "Not found. Theater box, showtime, or reservation not found."),
        
        @ApiResponse(responseCode = "409", description = "Conflict. Showtime has already occurred.") })
    @RequestMapping(value = "/reservation/cancel",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Reservation> reservationCancelDelete(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "theater_box_id", required = true) Long theaterBoxId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of the showtime." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "showtime_id", required = true) Long showtimeId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of the reservation to cancel." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "reservation_id", required = true) Long reservationId
);


    @Operation(summary = "Modify reservation for a given showtime", description = "Allows a member to modify their reservation for a given showtime.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation successfully modified.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Reservation.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request. Invalid number of seats requested or seats not available."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Member access token is invalid."),
        
        @ApiResponse(responseCode = "404", description = "Not found. Theater box, showtime, or reservation not found."),
        
        @ApiResponse(responseCode = "409", description = "Conflict. Requested number of seats not available for the given showtime.") })
    @RequestMapping(value = "/reservation/modify",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Reservation> reservationModifyPut(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Number of the theater box." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "theater_box_id", required = true) Long theaterBoxId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of the showtime." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "showtime_id", required = true) Long showtimeId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of the reservation to modify." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "reservation_id", required = true) Long reservationId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ReservationModifyBody body
);


    @Operation(summary = "Reserve seats for a given showtime", description = "Allows a member to reserve one or more seats for a given showtime.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Seats successfully reserved.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Reservation.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request. Invalid number of seats requested or seats not available."),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. Member access token is invalid."),
        
        @ApiResponse(responseCode = "404", description = "Not found. Theater box or showtime not found."),
        
        @ApiResponse(responseCode = "409", description = "Conflict. Requested number of seats not available.") })
    @RequestMapping(value = "/reservation/reserve",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Reservation> reservationReservePost(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "theater_box_id", required = true) Long theaterBoxId
, @NotNull @Parameter(in = ParameterIn.QUERY, description = "ID of the showtime." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "showtime_id", required = true) Long showtimeId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ReservationReserveBody body
);

}

