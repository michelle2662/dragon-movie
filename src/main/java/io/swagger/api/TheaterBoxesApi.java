/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.TheaterBox;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-11T20:35:28.031354+01:00[Europe/London]")
@Validated
public interface TheaterBoxesApi {

    @Operation(summary = "Get details about a specific theater box", description = "Returns details about a specific theater box.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Details about the theater box.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TheaterBox.class))) })
    @RequestMapping(value = "/theater_boxes/{box_number}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TheaterBox> theaterBoxesBoxNumberGet(@Parameter(in = ParameterIn.PATH, description = "Number of the theater box to retrieve details for.", required=true, schema=@Schema()) @PathVariable("box_number") Integer boxNumber
);


    @Operation(summary = "Get details of all theater boxes", description = "Returns details of all theater boxes.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of theater boxes.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TheaterBox.class)))) })
    @RequestMapping(value = "/theater_boxes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TheaterBox>> theaterBoxesGet();


    @Operation(summary = "Create a new theater box", description = "Allows an admin to create a new theater box.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Theater box successfully created.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TheaterBox.class)))),
        @ApiResponse(responseCode = "401", description = "Unauthorized. Admin access token is invalid."),
        @ApiResponse(responseCode = "403", description = "Forbidden. Only admins are allowed to perform this action.") })
    @RequestMapping(value = "/theater_boxes",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<TheaterBox>> theaterBoxesPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody TheaterBox body
);

}

