/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.Movie;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-04-19T09:54:05.273201+01:00[Europe/London]")
@Validated
public interface MoviesApi {

	@Operation(summary = "Delete a movie", description = "Allows an admin to delete a movie", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "successfully deleted movie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))),

			@ApiResponse(responseCode = "403", description = "Forbidden. Only admins are allowed to perform this action.") })
	@RequestMapping(value = "/movies/{id}", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Movie> moviesIdDelete(
			@Parameter(in = ParameterIn.HEADER, description = "Admin's access token for authorization.", required = true, schema = @Schema()) @RequestHeader(value = "access_token", required = true) String accessToken,
			@Parameter(in = ParameterIn.PATH, description = "the id of the movie to delete", required = true, schema = @Schema()) @PathVariable("id") Integer id);

	@Operation(summary = "Retrieve details about a movie", description = "Returns details about a specific movie", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "successfully retrieved movie details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))) })
	@RequestMapping(value = "/movies/{id}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<Movie> moviesIdGet(
			@Parameter(in = ParameterIn.PATH, description = "the id of the movie to get details about", required = true, schema = @Schema()) @PathVariable("id") Integer id);

	@Operation(summary = "Update a movie", description = "Allows an admin to update a movie", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "successfully updated movie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))),

			@ApiResponse(responseCode = "403", description = "Forbidden. Only admins are allowed to perform this action.") })
	@RequestMapping(value = "/movies/{id}", produces = { "application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Movie> moviesIdPut(
			@Parameter(in = ParameterIn.HEADER, description = "Admin's access token for authorization.", required = true, schema = @Schema()) @RequestHeader(value = "access_token", required = true) String accessToken,
			@Parameter(in = ParameterIn.PATH, description = "the id of the movie to update", required = true, schema = @Schema()) @PathVariable("id") Integer id,
			@NotNull @Parameter(in = ParameterIn.QUERY, description = "the title of the movie to update", required = true, schema = @Schema()) @Valid @RequestParam(value = "title", required = true) String title,
			@Parameter(in = ParameterIn.QUERY, description = "the updated director", schema = @Schema()) @Valid @RequestParam(value = "director", required = false) String director,
			@Parameter(in = ParameterIn.QUERY, description = "the updated genre", schema = @Schema()) @Valid @RequestParam(value = "genre", required = false) String genre,
			@Parameter(in = ParameterIn.QUERY, description = "the updated rating", schema = @Schema()) @Valid @RequestParam(value = "rating", required = false) String rating,
			@Parameter(in = ParameterIn.QUERY, description = "the updated length", schema = @Schema()) @Valid @RequestParam(value = "length", required = false) String length,
			@Parameter(in = ParameterIn.QUERY, description = "the updated review score", schema = @Schema()) @Valid @RequestParam(value = "reviewScore", required = false) BigDecimal reviewScore,
			@Parameter(in = ParameterIn.QUERY, description = "the updated release date", schema = @Schema()) @Valid @RequestParam(value = "releaseDate", required = false) String releaseDate,
			@Parameter(in = ParameterIn.QUERY, description = "the updated value for if the movie is currently playing", schema = @Schema()) @Valid @RequestParam(value = "currentlyPlaying", required = false) Boolean currentlyPlaying,
			@Parameter(in = ParameterIn.QUERY, description = "the updated value for if the move is an upcoming release", schema = @Schema()) @Valid @RequestParam(value = "upcomingRelease", required = false) Boolean upcomingRelease);

	@Operation(summary = "Create a movie", description = "Allows an admin to create a movie", tags = {})
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "successfully created movie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))),

			@ApiResponse(responseCode = "403", description = "Forbidden. Only admins are allowed to perform this action.") })
	@RequestMapping(value = "/movies", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Movie> moviesPost(
			@Parameter(in = ParameterIn.HEADER, description = "Admin's access token for authorization.", required = true, schema = @Schema()) @RequestHeader(value = "access_token", required = true) String accessToken,
			@Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Movie body);

}
